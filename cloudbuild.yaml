steps:
  # 0. Probar login y versión de Docker Compose
  - name: "docker:28.2.2-cli"
    id: "test-docker-compose-version"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        echo "$DOCKERFILE_PASSWORD" | docker login -u "$DOCKERFILE_USERNAME" --password-stdin
        docker compose version
    secretEnv: ['DOCKERFILE_USERNAME', 'DOCKERFILE_PASSWORD']

  # 1. Dar permisos de ejecución y compilar todos los servicios Java usando el script personalizado
  - name: "maven:3.9.9-eclipse-temurin-24"
    id: "chmod-and-compilar-java"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        chmod +x ./mvn.sh
        chmod +x ./mvnw || true
        find . -name mvnw -exec chmod +x {} \;
        ./mvn.sh

  # 2. Recuperar el secreto _ENV y crear el archivo .env para el frontend
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "crear-env-frontend"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gcloud secrets versions access latest --secret=_ENV > .env

  # 3. Recuperar el secreto _UNIFICADOR_ENV y crear el archivo unificador-db-secrets.env
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "crear-env-unificador"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gcloud secrets versions access latest --secret=_UNIFICADOR_ENV > unificador-db-secrets.env

  # 4. Renombrar .env.example a .env antes del build de Docker Compose
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "renombrar-env"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        mv frontend/.env.example frontend/.env

  # 5. Construir las imágenes Docker de todos los servicios definidos en docker-compose
  - name: "docker:28.2.2-cli"
    id: "build-docker"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        docker compose build

  # 6. Login en Docker Hub usando los secretos de usuario y contraseña
  - name: "docker:28.2.2-cli"
    id: "docker-login"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        echo "$DOCKERFILE_PASSWORD" | docker login -u "$DOCKERFILE_USERNAME" --password-stdin
    secretEnv: ['DOCKERFILE_USERNAME', 'DOCKERFILE_PASSWORD']

  # 7. Pushear las imágenes al registro
  - name: "docker:28.2.2-cli"
    id: "push-docker"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        docker compose push

  # 8. Desplegar en la VM de Google Cloud por SSH
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-vm'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute ssh crosscompare --zone us-central1-c --project onyx-messenger-461611-t7 --command '
          cd /home/rachidchaibali03 && \
          docker compose down && \
          docker image prune -af && \
          docker compose up -d --build
        '

availableSecrets:
  secretManager:
    - versionName: projects/onyx-messenger-461611-t7/secrets/_DOCKERFILE_USERNAME/versions/latest
      env: 'DOCKERFILE_USERNAME'
    - versionName: projects/onyx-messenger-461611-t7/secrets/_DOCKERFILE_PASSWORD/versions/latest
      env: 'DOCKERFILE_PASSWORD'

options:
  logging: CLOUD_LOGGING_ONLY
